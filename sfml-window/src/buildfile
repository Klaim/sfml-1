intf_libs = sfml-system%lib{sfml-system}
impl_libs = # Implementation dependencies.

# Public headers.
pub = [dir_path] ../include/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

lib{sfml-window}: $pub/{$pub_hdrs}

# Private headers and sources as well as dependencies.
lib{sfml-window}: SFML/Window/{hxx cxx}{*} $impl_libs $intf_libs

switch $cxx.target.class
{
	case 'windows'
		lib{sfml-window}: SFML/Window/Win32/{hxx cxx}{*}
	case 'linux'
		lib{sfml-window}: SFML/Window/Unix/{hxx cxx}{*}
	case 'macos'
		lib{sfml-window}: SFML/Window/OSX/{hxx cxx}{*}
}

# Build options.
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/

cxx.poptions =+ "-I$out_pfx_src" "-I$src_pfx_src" \
                "-I$out_pfx_inc" "-I$src_pfx_inc"

{hbmia obja}{*}: cxx.poptions += -DSFML_WINDOW_STATIC_BUILD
{hbmis objs}{*}: cxx.poptions += -DSFML_WINDOW_SHARED_BUILD

# Export options.
lib{sfml-window}:
{
  cxx.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc"
  cxx.export.libs = $intf_libs
}

liba{sfml-window}: cxx.export.poptions += -DSFML_WINDOW_STATIC
libs{sfml-window}: cxx.export.poptions += -DSFML_WINDOW_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
if $version.pre_release
  lib{sfml-window}: bin.lib.version = "-$version.project_id"
else
  lib{sfml-window}: bin.lib.version = "-$version.major.$version.minor"

# Don't install private headers.
{hxx ixx txx}{*}: install = false
